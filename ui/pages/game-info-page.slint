import { StyleMetrics, ScrollView , VerticalBox, Spinner, Palette } from "std-widgets.slint";
import { GameInfo, GameState, GameLogLoadState, GameLogLoadRequestType, GameInfoViewType, GameOptions } from "../game-info.slint";
import { UserInfo, UserStatus, UserProgress } from "../user-info.slint";
import { MockData } from "../mock-data.slint";
import { Callbacks } from "../callbacks.slint";
import { GameCard } from "game-card.slint";
import { BannerNotification } from "../components/banner-notification.slint";
import { StateGlobals, WebViewType, ReleaseUpdateType, ReleaseUpdateState } from "../state-globals.slint";
import { LoadingPlaceholder } from "../components/placeholder-card.slint";
import { MapSelector } from "../components/map-selector.slint";

export enum FetchGamesState {
    NotFetched,
    Fetching,
    Fetched,
    Retrying
}

export enum SseConnectState {
    Disconnected,
    DisconnectedOccupiedElsewhere,
    Connected
}

component FetchGamesIndicator inherits Rectangle {
    in property <[GameInfo]> game-info-list;
    in property <FetchGamesState> fetch-games-state: FetchGamesState.Fetching;
    private property <string> fetch-games-status-text;
    private property <[string]> loading-icon-seq: [
        "🏃",
        "🏂",
        "🏊",
        "🏇",
        "🚵",
        "🏄",
        "🚴",
        "🚣",
        "🧑‍🦽",
    ];
    private property <int> loading-icon-seq-len: 9;

    border-radius: 10px;
    background: Palette.alternate-background;
    drop-shadow-blur: StyleMetrics.dark-color-scheme
        ? 0px
        : 5px;
    clip: true;

    LoadingPlaceholder {
        HorizontalLayout {
            spacing: 5px;
            alignment: center;

            Text {
                text: loading-icon-seq[floor(mod(animation-tick(), 0.4s * loading-icon-seq-len) / 0.4s)];
                color: Palette.alternate-foreground;
                font-size: 20px;
                horizontal-alignment: center;
                vertical-alignment: center;
            }

            Text {
                text: fetch-games-status-text;
                color: Palette.alternate-foreground;
                font-size: 15px;
                vertical-alignment: center;
                horizontal-alignment: center;
            }
        }
    }

    states [
        fetching when fetch-games-state == FetchGamesState.Fetching: {
            fetch-games-status-text: @tr("正在加载账号列表…… ");
        }
        empty when fetch-games-state == FetchGamesState.Fetched && game-info-list.length == 0: {
            fetch-games-status-text: @tr("这里似乎没有游戏账号 ");
        }
        retrying when fetch-games-state == FetchGamesState.Retrying: {
            fetch-games-status-text: @tr("加载账号列表似乎不太顺利…… ");
        }
    ]
}

export component GameInfoPage {
    in property <UserInfo> user;
    in property <[GameInfo]> game-info-list: [
        MockData.game-info,
        MockData.game-info,
        MockData.game-info,
    ];
    in property <FetchGamesState> fetch-games-state: FetchGamesState.Fetching;
    in property <SseConnectState> sse-connect-state;
    private property <string> fetch-games-status-text;
    private property <int> map-selector-target-idx;
    private property <length> map-selector-width: min(self.width - 10px, 350px);

    callback goto-slot-page(); // TODO: 把导航回调放到全局

    ScrollView {
        HorizontalLayout {
            alignment: space-around;

            VerticalBox {
                alignment: start;
                padding-left: 10px;
                padding-right: 15px;
                padding-top: 10px;
                spacing: 10px;

                width: min(root.width, 1440px);

                if StateGlobals.update-version != "": BannerNotification {
                    pure function update-action-text() -> string {
                        StateGlobals.update-type == ReleaseUpdateType.FullDownload
                            ? @tr("更新客户端")
                            : @tr("增量更新")
                    }

                    background-color: Palette.alternate-background;
                    accent-color: StyleMetrics.default-text-color;

                    action => {
                        if StateGlobals.update-state == ReleaseUpdateState.Idle {
                            Callbacks.download-update();
                        }
                    }

                    states [
                        idle when StateGlobals.update-state == ReleaseUpdateState.Idle: {
                            text: @tr("🆕 可露希尔客户端有新版本可用 - ") + StateGlobals.update-version;
                            has-action: true;
                            action-text: "["
                                + update-action-text()
                                + "："
                                + StateGlobals.update-size
                                + "]";
                        }
                        downloading when StateGlobals.update-state == ReleaseUpdateState.Downloading: {
                            text: @tr("⏳ 正在") 
                                + update-action-text() 
                                + @tr("…  ")  
                                + StateGlobals.update-downloaded-size + "/" + StateGlobals.update-size;
                            has-action: false;
                            has-progress: true;
                            progress: StateGlobals.update-progress;
                            indeterminate: StateGlobals.update-indeterminate;
                        }
                        ready when StateGlobals.update-state == ReleaseUpdateState.Ready: {
                            text: @tr("✅ 更新下载成功！关闭客户端后将自动开始更新。");
                            has-action: false;
                        }
                    ]
                }

                if StateGlobals.site-announcement != "" 
                    || StateGlobals.is-site-under-maintenance : HorizontalLayout {
                    spacing: 10px;
                    if StateGlobals.site-announcement != "" : BannerNotification {
                        background-color: Palette.alternate-background;
                        accent-color: StyleMetrics.default-text-color;
                        has-action: false;
                        text: @tr("📢 ") + StateGlobals.site-announcement;
                        wrap: word-wrap;
                    }

                    if StateGlobals.is-site-under-maintenance : BannerNotification {
                        background-color: Palette.alternate-background;
                        accent-color: StyleMetrics.default-text-color;
                        has-action: false;
                        text: @tr("🚧 可露希尔平台正在维护中");
                    }
                }

                if user.status == UserStatus.Banned : BannerNotification {
                    background-color: #dd8800;
                    accent-color: #fffceb;
                    text: @tr("🛑 你的可露希尔账号已经被管理员停用");
                }

                if !StateGlobals.has-default-webview-installation && StateGlobals.has-webview-launch-failure: BannerNotification {
                    private property <bool> is-ms-edge-webview2: 
                        StateGlobals.default-webview-installation-type == WebViewType.MicrosoftEdgeWebView2;

                    background-color: #dd8800;
                    accent-color: #fffceb;
                    has-action: true;
                    action-icon: @image-url("../images/ext_link.svg");
                    action => { 
                        if is-ms-edge-webview2 {
                            Callbacks.open-ext-link("https://developer.microsoft.com/microsoft-edge/webview2/consumer/");
                        }
                    }

                    states [
                        ms-edge-webview2 when is-ms-edge-webview2: {
                            text: @tr("🚧 内置浏览器启动失败，无法进行进行滑块验证等操作。请尝试安装 Microsoft Edge WebView2 后重启客户端 👉");
                            action-text: @tr("[下载页面]");
                        }
                    ]
                }
    
                if sse-connect-state != SseConnectState.Connected: BannerNotification {
                    background-color: #dd8800;
                    accent-color: #fffceb;
                    has-action: true;
                    action-text: @tr("[重新连接]");
                    action => { Callbacks.reconnect-sse(); }
    
                    states [
                        disconnected when sse-connect-state == SseConnectState.Disconnected: {
                            text: @tr("📡 与服务器的连接意外断开，请重新连接 👉");
                        }
                        disconnected-occupied-elaswhere when 
                            sse-connect-state == SseConnectState.DisconnectedOccupiedElsewhere: {
                            text: @tr("🚧 你已经在其他位置登入可露希尔管理终端，请重新上线 👉");
                        }
                    ]
                }
                
                if user.progress == UserProgress.SmsVerifySlotAdded: BannerNotification {
                    background-color: #0661d0;
                    accent-color: #ebf3ff;
                    text: @tr("⏰ 你的首个账号在启动后将处于24小时试用期，启动后请留意验证码短信，在试用期内及时前往认证");
                    has-action: true;
                    action-text: @tr("[已收到验证码]");
                    action-icon: @image-url("../images/ext_link.svg");
                    action => { goto-slot-page(); }
                }
    
                if fetch-games-state == FetchGamesState.Fetched && game-info-list.length == 0: BannerNotification {
                    background-color: #0661d0;
                    accent-color: #ebf3ff;
                    text: @tr("🤷‍♂️ 你还没有添加任何游戏账号，请前往【账号管理】添加 👉");
                    has-action: true;
                    action-text: @tr("[转到账号管理]");
                    action-icon: @image-url("../images/ext_link.svg");
                    action => { goto-slot-page(); }
                }
    
                for game-info[game-info-idx] in game-info-list: GameCard {
                    info: game-info;
    
                    start-game(id) => { Callbacks.start-game(id); }
                    stop-game(id) => { Callbacks.stop-game(id); }
                    restart-game(id) => { Callbacks.restart-game(id); }
                    save-options(id, options) => { Callbacks.save-options(id, options); }
                    load-logs(id, type) => { Callbacks.load-logs(id, type); }
                    view-changed(id, type) => { Callbacks.view-changed(id, type); }
                    select-map => { 
                        map-selector-target-idx = game-info-idx;
                        map-selector.show();
                    }
                }

                if fetch-games-state != FetchGamesState.NotFetched 
                    && game-info-list.length == 0: FetchGamesIndicator {
                    game-info-list: game-info-list;
                    fetch-games-state: fetch-games-state;

                    height: 100px;
                }
            }
        }
    }

    map-selector := PopupWindow {
        private property <GameInfo> target-game: game-info-list[map-selector-target-idx];
        
        close-on-click: false;
        init => {
            map-selector-control.focus-search-box();
        }

        Rectangle {
            border-top-right-radius: 10px;
            border-bottom-right-radius: 10px;
            background: Palette.background;
            drop-shadow-blur: 5px;

            FocusScope {
                VerticalLayout {
                    padding: 5px;

                    map-selector-control := MapSelector {
                        info: target-game;
        
                        search-maps(id, term, fuzzy) => { Callbacks.search-maps(id, term, fuzzy); }
                        set-map-selected(id, battle-map, selected) => { Callbacks.set-map-selected(id, battle-map, selected); } 
                        reset-selected-maps(id) => { 
                            Callbacks.reset-selected-maps(id);
                            map-selector.close();
                        }
                        save-maps(id, maps) => { 
                            Callbacks.save-maps(id, maps);
                            map-selector.close();
                        }
                    }
                }

                key-pressed(ev) => {
                    if ev.text == Key.Escape {
                        map-selector-control.reset-selected-maps(target-game.id);
                        EventResult.accept
                    } else {
                        EventResult.reject
                    }
                }
            }
        }

        x: 0px;
        y: 0px;
        width: map-selector-width;
        height: root.height;
    }
}
