import { VerticalBox, HorizontalBox , LineEdit, Button, Palette, Spinner, Switch, ScrollView } from "std-widgets.slint";
import { ClosureStudioLogoStacked } from "./components/closure-studio-logo.slint";
import { FontGlobals } from "font-globals.slint";
import { StateGlobals } from "state-globals.slint";
import { DesktopEditionIcon } from "components/closure-studio-logo.slint";

export enum LoginState {
    Unlogged,
    LoggingIn,
    Errored,
    Logged
}

export component LoginWindow inherits Window {
    title: @tr("Closure Studio - 登录");
    icon: @image-url("images/closure_drone.png");
    width: 400px;
    height: 720px;
    horizontal-stretch: 0;
    vertical-stretch: 0;
    background: Palette.alternate-background;
    in-out property <LoginState> login-state: LoginState.Unlogged;
    in-out property <string> login-status-text: "请求错误：用户名或密码错误\n - 状态码: 200\n - 内部状态码: 0\n - 原始数据: ";
    private property <bool> logging;
    private property <bool> use-auth;
    callback login-requested(string, string);
    callback auth-requested();
    callback open-ext-link(string);
    callback set-data-saver-mode(bool);
    public function set-use-auth(account: string, use-auth-val: bool) {
        use-auth = use-auth-val;
        if account != "" {
            account-input.text = account;
        }
        if !use-auth-val {
            password-input.text = "";
        }
    }
    function do-login() {
        if use-auth {
            auth-requested();
        } else {
            login-requested(account-input.text, password-input.text);
        }
    }
    VerticalLayout {
        alignment: space-around;
        padding-left: 20px;
        padding-right: 20px;
        VerticalLayout {
            alignment: center;
            HorizontalLayout {
                alignment: start;
                ClosureStudioLogoStacked {
                    single-row-size: 63px;
                    vertical-stretch: 0;
                }
            }

            HorizontalLayout {
                padding-left: 5px;
                pure function get-header-text() -> string {
                    if login-state == LoginState.LoggingIn {
                        @tr("🚀 正在为你准备……")
                    } else if login-state == LoginState.Errored {
                        @tr("🔄 出现问题，请再试一遍。")
                    } else {
                        @tr("👋 欢迎回来！")
                    }
                }
                Text {
                    text: get-header-text();
                    font-size: 22px;
                    font-weight: 500;
                    horizontal-alignment: left;
                    vertical-alignment: top;
                }
            }

            height: 300px;
        }

        VerticalLayout {
            alignment: stretch;
            HorizontalBox {
                spacing: 12px;
                alignment: stretch;
                account-input := LineEdit {
                    accessible-role: AccessibleRole.button;
                    enabled: !use-auth && !logging;
                    height: 42px;
                    horizontal-alignment: left;
                    font-size: 15px;
                    placeholder-text: @tr("用户名");
                    accepted => {
                        password-input.focus()
                    }
                }

                register := Button {
                    text: @tr("注册…");
                    icon: @image-url("images/ext_link.svg");
                    colorize-icon: true;
                    clicked => {
                        open-ext-link("https://closure.ltsc.vip");
                    }
                }

                vertical-stretch: 0;
            }

            HorizontalBox {
                alignment: stretch;
                password-input := LineEdit {
                    enabled: !use-auth && !logging;
                    horizontal-alignment: left;
                    input-type: InputType.password;
                    font-size: 15px;
                    placeholder-text: use-auth ? @tr("已记住登录状态") : @tr("密码");
                    accepted => {
                        do-login();
                    }
                    height: 42px;
                }

                vertical-stretch: 0;
            }

            HorizontalBox {
                alignment: space-between;
                padding-left: 12px;
                Switch {
                    text: @tr("低数据模式（无图片）");
                    checked: StateGlobals.data-saver-mode-enabled;
                    toggled => {
                        set-data-saver-mode(self.checked);
                    }
                    height: 38px;
                }

                if login-state != LoginState.LoggingIn: Button {
                    primary: true;
                    enabled: !logging && ((account-input.text != "" && password-input.text != "") || use-auth);
                    text: @tr("登录");
                    clicked => {
                        do-login()
                    }
                    width: 110px;
                    height: 38px;
                }
                if logging: HorizontalLayout {
                    alignment: center;
                    Spinner {
                        indeterminate: true;
                    }

                    height: 38px;
                }
                vertical-stretch: 0;
            }

            if use-auth && !logging: HorizontalLayout {
                alignment: center;
                Rectangle {
                    Text {
                        text: @tr("[登录其他账号]");
                    }

                    TouchArea {
                        clicked => {
                            set-use-auth("", false);
                        }
                    }
                }

                vertical-stretch: 0;
            }
            HorizontalBox {
                alignment: center;
                Rectangle {
                    border-radius: 8px;
                    background: login-state == LoginState.Errored ? #dd8800 : #0000;
                    status-scroll := ScrollView {
                        status-area := VerticalLayout {
                            spacing: 10px;
                            padding-top: 5px;
                            padding-bottom: 5px;
                            padding-left: 15px;
                            padding-right: 15px;
                            alignment: center;
                            Text {
                                vertical-alignment: center;
                                horizontal-alignment: left;
                                color: login-state == LoginState.Errored ? whitesmoke : Palette.foreground;
                                font-size: 14px;
                                text: login-state == LoginState.Errored ? login-status-text : "";
                                wrap: word-wrap;
                            }
                        }
                    }

                    preferred-width: root.width - 40px;
                }

                vertical-stretch: 1;
                preferred-height: min(status-area.min-height + 30px, 300px);
            }
        }

        HorizontalLayout {
            alignment: space-between;
            VerticalLayout {
                alignment: center;
                Text {
                    text: @tr("可露希尔云平台 - D32轻量桌面端");
                    font-family: FontGlobals.alphanumeric-text-sans;
                    horizontal-alignment: left;
                }

                Text {
                    text: @tr("https://arknights.host");
                    font-family: FontGlobals.alphanumeric-text-sans;
                    horizontal-alignment: left;
                }
            }

            TouchArea {
                VerticalLayout {
                    alignment: space-between;
                    DesktopEditionIcon { }
                }

                clicked => {
                    open-ext-link("https://github.com/closure-studio/arkhost-ui-slint")
                }
            }
        }
    }

    states [
        unlogged when login-state == LoginState.Unlogged: {
            logging: false;
        }
        logging when login-state == LoginState.LoggingIn: {
            logging: true;
        }
        errored when login-state == LoginState.Errored: {
            logging: false;
        }
        logged when login-state == LoginState.Logged: {
            logging: false;
        }
    ]
}
