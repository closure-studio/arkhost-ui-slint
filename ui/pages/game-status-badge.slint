import { GridBox , Button, HorizontalBox, VerticalBox, StyleMetrics, Palette } from "std-widgets.slint";
import { GameInfo, GameState } from "../game-info.slint";
import { FontGlobals } from "../font-globals.slint";

component GameStatusBadgeBase inherits Rectangle {
    in property <GameInfo> info;
    in property <bool> enable-icon-blinking: true;

    out property <brush> status-color;
    out property <string> status-text;
    out property <image> status-icon;
    out property <bool> status-icon-blinking;

    states [
        logging when info.game-state == GameState.Logging: {
            status-color: @linear-gradient(15deg, #32b1d4 0%, #1299be 100%);
            status-text: @tr("登录中");
            status-icon: @image-url("../images/game_status_logging.svg");
            status-icon-blinking: true;
        }
        running when info.game-state == GameState.Running: {
            status-color: @linear-gradient(15deg, #59b72a 0%, #5db813 100%);
            status-text: @tr("运行中");
            status-icon: @image-url("../images/game_status_running.svg");
            status-icon-blinking: false;
        }
        faulted when info.game-state == GameState.Faulted: {
            status-color: @linear-gradient(15deg, #dd4f24 0%, #db4321 100%);
            status-text: info.status-text;
            status-icon: @image-url("../images/game_status_faulted.svg");
            status-icon-blinking: false;
        }
        stopped when info.game-state == GameState.Stopped: {
            status-color: #494949;
            status-text: @tr("已停止");
            status-icon: @image-url("../images/game_status_stopped.svg");
            status-icon-blinking: false;
        }
        captcha when info.game-state == GameState.Captcha: {
            status-color: @linear-gradient(15deg, #32b1d4 0%, #1299be 100%);
            status-text: @tr("进行人机验证");
            status-icon: @image-url("../images/game_status_captcha.svg");
            status-icon-blinking: true;
        }
    ]
}

export component GameStatusBadge inherits GameStatusBadgeBase {
    in property <bool> compact;
    private property <length> horz-padding: compact
        ? 0px
        : 15px;

    border-radius: self.height * 0.25;
    background: self.status-color;

    animate background { duration: 200ms; }

    HorizontalBox {
        alignment: space-around;
        padding-left: horz-padding;
        padding-right: horz-padding;
        spacing: 15px;

        Image {
            source: root.status-icon;
            colorize: whitesmoke;
            width: 24px;
            height: 24px;
        }

        if !compact : Text {
            text: root.status-text;
            font-size: 14px;
            horizontal-alignment: center;
            vertical-alignment: center;
            min-width: 96px;
        }
    }
}

export component GameStatusBadgeWide inherits GameStatusBadgeBase {
    border-radius: 4px;
    background: Palette.control-background;

    clip: true;

    HorizontalBox {
        padding-left: 15px;
        padding-right: 15px;
        spacing: 15px;

        Image {
            source: root.status-icon;
            colorize: root.enable-icon-blinking && root.status-icon-blinking
                ? StyleMetrics.default-text-color.with-alpha(0.5 * (1 + sin(mod(animation-tick(), 2s) / 1s * 2rad)))
                : StyleMetrics.default-text-color;
            width: 26px;
            height: 26px;
            horizontal-stretch: 0;
        }

        Text {
            text: root.status-text;
            font-size: 14px;
            font-weight: FontGlobals.emphasis-font-weight;
            horizontal-alignment: center;
            vertical-alignment: center;

            horizontal-stretch: 1;
        }
    }
}