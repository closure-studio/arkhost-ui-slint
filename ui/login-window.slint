import { VerticalBox, HorizontalBox , LineEdit, Button, StyleMetrics , Spinner} from "std-widgets.slint";
import { ClosureStudioLogoStacked } from "./components/closure-studio-logo.slint";
import { FontGlobals } from "./font-globals.slint";

export enum LoginState {
    Unlogged,
    LoggingIn,
    Errored,
    Logged
}

export component LoginWindow {
    width: 360px;
    vertical-stretch: 0;
    in-out property <LoginState> login-state;
    in-out property <string> login-status-text: "";

    private property <bool> logging;
    private property <bool> use-auth;

    callback login-requested(string, string);
    callback auth-requested();
    callback register-requested <=> register.clicked;
    public function set-use-auth(
        account: string, 
        use-auth-val: bool
    ) {
        use-auth = use-auth-val;
        if (use-auth-val) {
            account-input.text = account;
        } else {
            password-input.text = "";
        }
    }

    vbox := VerticalBox {
        alignment: start;

        HorizontalBox {
            alignment: start;
            
            register := Button {
                text: @tr("注册...");
                icon: StyleMetrics.dark-color-scheme
                    ? @image-url("images/ext_link.svg")
                    : @image-url("images/ext_link_light.svg");
            }
        }

        ClosureStudioLogoStacked {
            single-row-size: 60px;
        }

        HorizontalBox {
            alignment: center;

            Text {
                font-size: 18px;
                vertical-alignment: center;
                horizontal-alignment: left;

                text: @tr("登录可露希尔通行证");
            }
        }

        HorizontalBox {
            alignment: center;

            account-input := LineEdit {
                enabled: !use-auth && !logging;
                width: parent.width - 40px;
                height: 42px;
                horizontal-alignment: left;

                placeholder-text: @tr("账号");
            }
        }

        HorizontalBox {
            alignment: center;

            password-input := LineEdit {
                enabled: !use-auth && !logging;
                width: parent.width - 40px;
                height: 42px;
                horizontal-alignment: left;
                input-type: InputType.password;

                placeholder-text: use-auth ? @tr("已记住登录状态") : @tr("密码");
            }
        }

        HorizontalBox {
            alignment: center;

            Button {
                enabled: !logging;
                text: @tr("登录");
                width: parent.width - 40px;
                clicked => {
                    if (use-auth) {
                        auth-requested();
                    } else {
                        login-requested(account-input.text, password-input.text);
                    }
                }
            }
        }

        if use-auth && !logging : HorizontalLayout {
            alignment: center;

            Rectangle {
                Text {
                    text: @tr("[退出当前登录]");
                }

                TouchArea {
                    clicked => {
                        set-use-auth("", false);
                    }
                }
            }
        }

        HorizontalBox {
            alignment: center;

            login-spinner := Spinner {
                visible: logging;
                indeterminate: true;
                width: self.visible ? 40px : 0px;
            }

            Text {
                vertical-alignment: center;

                text: login-status-text;
                wrap: word-wrap;
            }
        }

        Rectangle {
            height: 40px;
        }

        Rectangle {
            height: 24px;

            VerticalBox {

                Text {
                    text: @tr("可露希尔云托管");
                    horizontal-alignment: center;
                }

                Text {
                    text: @tr("https://arknights.host");
                    font-family: FontGlobals.alphanumeric-text-sans;
                    horizontal-alignment: center;
                }
            }
        }
    }

    states [
        unlogged when login-state == LoginState.Unlogged: {
            logging: false;
        }
        logging when login-state == LoginState.LoggingIn: {
            logging: true;
        }
        errored when login-state == LoginState.Errored: {
            logging: false;
        }
        logged when login-state == LoginState.Logged: {
            logging: false;
        }
    ]
}