import { 
    GridBox,
    Button,
    HorizontalBox,
    VerticalBox,
    Palette
} from "std-widgets.slint";
import { GameInfo, GameState, GameInfoViewType, GameLogLoadState, GameLogLoadRequestType, BattleMap } from "../game-info.slint";
import { GameCardDoctorInfo } from "game-card-doctor-info.slint";
import { GameCardOptions } from "game-card-options.slint";
import { GameCardLog } from "game-card-log.slint";
import { GameCardOperationShortcutPanel, GameCardOperationShortcutPanelVertical } from "game-card-operation-shotcut-panel.slint";
import { GameStatusBadge } from "game-status-badge.slint";
import { MockData } from "../mock-data.slint";
import { CharIllust } from "../components/char-illust.slint";
import { GameCardBattle } from "game-card-battle.slint";
import { Theme } from "../theme.slint";

component GameCardTab inherits Rectangle {
    in property <length> design-height;
    in property <length> adaptive-height;
    in property <int> active-tab;
    in property <int> current-active-tab;
    y: current-active-tab == active-tab
        ? 0
        : current-active-tab > active-tab
            ? - self.height - 5px
            : root.height + 5px;

    height: adaptive-height;
    states [
        active when current-active-tab == active-tab: {
            opacity: 1;
        }
        inactive when current-active-tab == active-tab: {
            opacity: 0;
            in { animate opacity { delay: 0.25s; } }
        }
    ]
    animate y { duration: 0.25s; easing: ease; }
    @children
}

component GameCardTabSwitch inherits Rectangle {
    in property <image> icon;
    in property <string> name;
    in property <int> active-tab;
    in property <int> current-active-tab;
    in property <bool> enable-special-fx;
    private property <bool> selected: current-active-tab == active-tab;
    private property <length> name-text-height;

    width: 36px;
    height: selected ? 50px : 36px;

    callback clicked <=> touch-area.clicked;

    Rectangle {
        height: root.height;
        width: 50px;

        background: Palette.color-scheme == ColorScheme.dark
            ? #3c3c3c
            : Palette.background;
        border-radius: 6px;

        animate opacity { duration: 0.15s; }
        states [
            up when !selected && !touch-area.has-hover: {
                opacity: 0%;
            }
            hover when !selected && touch-area.has-hover: {
                opacity: 70%;
            }
            selected when selected || touch-area.pressed: {
                opacity: 100%;
            }
        ]
    }


    HorizontalLayout {
        alignment: center;

        VerticalLayout {
            alignment: center;

            Image {
                source: icon;
                width: root.width * 0.75;
                height: root.width * 0.75;
                colorize: selected
                    ? Palette.control-foreground
                    : Palette.control-foreground.transparentize(60%);
        
                animate colorize { duration: 0.25s; }

                states [
                    rotate when selected && enable-special-fx && touch-area.pressed: {
                        rotation-angle: 360deg;
                        in { animate rotation-angle { duration: 0.5s; } }
                    }
                    reset-rotate when enable-special-fx && !touch-area.pressed: {
                        rotation-angle: 0deg;
                        in { animate rotation-angle { duration: 1s; delay: 1s; } }
                    }
                ]
            }

            Text {
                font-size: 11px;
                text: name;
                color: Palette.control-foreground;

                vertical-alignment: top;
                horizontal-alignment: center;
                height: selected ? 15px : 0px;
                animate height { duration: 0.25s; }

                states [
                    show when selected: {
                        height: 15px;
                        opacity: 1;
                        in { animate opacity { delay: 0.15s; duration: 0.1s; } }
                    }
                    hide when !selected: {
                        height: 0px;
                        opacity: 0;
                        in { animate opacity { duration: 0.1s; } }
                    }
                ]
            }
        }
    }

    animate height { duration: 0.25s; }

    touch-area := TouchArea { }
}

export component GameCard inherits Rectangle {
    in property <GameInfo> info: MockData.game-info;
    private property <int> current-active-tab: 0;
    
    callback start-game(string);
    callback stop-game(string);
    callback restart-game(string);
    callback save-options <=> options.save-options;
    callback load-logs <=> logs.load-logs;
    callback view-changed(string, GameInfoViewType);
    callback select-map <=> battle.select-map;
    
    border-radius: 10px;
    background: Palette.alternate-background;
    drop-shadow-blur: Palette.color-scheme == ColorScheme.dark
        ? 0px
        : 5px;
    drop-shadow-color: darkgray;
    clip: true;
    
    CharIllust {
        illust-info: info.details.char-illust;
        target-width: min(1000px, parent.width * 0.6);
        property <length> pos-x: max(270px, parent.width * 0.35);

        states [
            show when info.details.char-illust.loaded 
                && current-active-tab == 0 
                && parent.width >= 600px: {
                x: pos-x;
                y: 0;
                opacity: 1;
                in {
                    animate opacity {
                        delay: 0.15s;
                        duration: 0.2s;
                    }
            
                    animate x {
                        delay: 0.15s;
                        duration: 0.2s;
                        easing: ease;
                    }
                }
            }
            hide when !info.details.char-illust.loaded 
                || current-active-tab != 0 
                || parent.width < 600px: {
                x: pos-x + 40px;
                y: doctor-tab.y;
                opacity: 0;
                in {
                    animate opacity { duration: 0.1s; }
                    animate y { duration: 0.1s; }

                    animate x {
                        delay: 0.1s;
                    }
                }
            }
        ]
    }

    HorizontalBox {
        spacing: 5px;

        VerticalLayout {
            Rectangle {
                private property <length> current-tab-design-height: doctor-tab.design-height;
                pure function get-adaptive-height(orig-width: length) -> length {
                    return orig-width * clamp(1 + (root.width - 1200px) / 800px, 1, 4.8 / 3);
                }
                clip: true;

                doctor-tab := GameCardTab {
                    active-tab: 0;
                    current-active-tab: current-active-tab;
                    doc-info := GameCardDoctorInfo {
                        info: info; 

                        start-game(id) => { start-game(id); }
                        stop-game(id) => { stop-game(id); }
                        restart-game(id) => { restart-game(id); }
                    }
                    design-height: 320px;
                    adaptive-height: get-adaptive-height(self.design-height);
                }

                battle-tab := GameCardTab {
                    active-tab: 1;
                    current-active-tab: current-active-tab;
                    battle := GameCardBattle {
                        info: info;
                    }
                    design-height: 450px;
                    adaptive-height: get-adaptive-height(self.design-height);
                }
                
                settings-tab := GameCardTab {
                    active-tab: 2;
                    current-active-tab: current-active-tab;
                    options := GameCardOptions {
                        info: info;
                    }
                    design-height: 450px;
                    adaptive-height: get-adaptive-height(self.design-height);
                }

                log-tab := GameCardTab {
                    active-tab: 3;
                    current-active-tab: current-active-tab;
                    logs := GameCardLog {
                        info: info;
                    }
                    design-height: 500px;
                    adaptive-height: get-adaptive-height(self.design-height);
                }

                height: get-adaptive-height(current-tab-design-height);
                
                states [
                    doc-info when current-active-tab == 0: {
                        current-tab-design-height: doctor-tab.design-height;
                        height: get-adaptive-height(current-tab-design-height);
                        in { animate height { duration: 0.25s; easing: ease; } }
                    }
                    battle when current-active-tab == 1: {
                        current-tab-design-height: battle-tab.design-height;
                        height: get-adaptive-height(current-tab-design-height);
                        in { animate height { duration: 0.25s; easing: ease; } }
                    }
                    settings when current-active-tab == 2: {
                        current-tab-design-height: settings-tab.design-height;
                        height: get-adaptive-height(current-tab-design-height);
                        in { animate height { duration: 0.25s; easing: ease; } }
                    }
                    log when current-active-tab == 3: {
                        current-tab-design-height: log-tab.design-height;
                        height: get-adaptive-height(current-tab-design-height);
                        in { animate height { duration: 0.25s; easing: ease; } }
                    }
                ]
            }
        }

        Rectangle {
            background: Theme.control-group-background;
            border-radius: 10px;

            VerticalLayout {
                padding: 10px;

                alignment: space-between;
    
                VerticalBox {
                    padding-top: 0;
                    alignment: start;
    
                    GameCardTabSwitch {
                        name: @tr("信息");
                        active-tab: 0;
                        current-active-tab: current-active-tab;
                        icon: @image-url("../images/game_card_tab_user.svg");
                        clicked => { 
                            current-active-tab = self.active-tab; 
                            view-changed(info.id, GameInfoViewType.DoctorInfo);
                        }
                    }

                    GameCardTabSwitch {
                        name: @tr("作战");
                        active-tab: 1;
                        current-active-tab: current-active-tab;
                        icon: @image-url("../images/icon_battle.png");
                        clicked => { 
                            current-active-tab = self.active-tab; 
                            view-changed(info.id, GameInfoViewType.Battle);
                        }
                    }
        
                    GameCardTabSwitch {
                        name: @tr("设置");
                        active-tab: 2;
                        current-active-tab: current-active-tab;
                        icon: @image-url("../images/game_card_tab_options.svg");
                        clicked => { 
                            current-active-tab = self.active-tab; 
                            view-changed(info.id, GameInfoViewType.Settings);
                        }
                    }
        
                    GameCardTabSwitch {
                        name: @tr("日志");
                        active-tab: 3;
                        current-active-tab: current-active-tab;
                        icon: @image-url("../images/game_card_tab_log.svg");
                        enable-special-fx: true;
                        clicked => { 
                            current-active-tab = self.active-tab;                 
                            view-changed(info.id, GameInfoViewType.Logs);
                        }
                    }
                }
    
                VerticalLayout {
                    spacing: 10px;
                    alignment: end;
    
                    // GameCardOperationShortcutPanelVertical {
                    //     start-game(id) => { start-game(id); }
                    //     stop-game(id) => { stop-game(id); }
                    //     restart-game(id) => { restart-game(id); }

                    //     info: info;
                    //     compact: true;
    
                    //     opacity: current-active-tab != 0
                    //         ? 100%
                    //         : 0%;
                    
                    //     animate opacity {
                    //         easing: ease;
                    //         duration: 0.125s;
                    //     }
                    // }
    
                    GameStatusBadge {
                        info: info;
                        compact: true;
                        opacity: current-active-tab != 0
                            ? 100%
                            : 0%;
                    
                        animate opacity {
                            easing: ease;
                            duration: 0.125s;
                        }
                    }
                }
            }
        }
    }
}