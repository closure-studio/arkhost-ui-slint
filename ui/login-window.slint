import { VerticalBox, HorizontalBox , LineEdit, Button, StyleMetrics, Palette, Spinner, Switch } from "std-widgets.slint";
import { ClosureStudioLogoStacked } from "./components/closure-studio-logo.slint";
import { FontGlobals } from "font-globals.slint";
import { Callbacks } from "callbacks.slint";
import { StateGlobals } from "state-globals.slint";

export enum LoginState {
    Unlogged,
    LoggingIn,
    Errored,
    Logged
}

export component LoginWindow {
    width: 360px;
    vertical-stretch: 0;
    in-out property <LoginState> login-state: LoginState.Errored;
    in-out property <string> login-status-text: "登陆失败 ";

    private property <bool> logging;
    private property <bool> use-auth;

    callback login-requested(string, string);
    callback auth-requested();
    callback register-requested <=> register.clicked;
    public function set-use-auth(
        account: string, 
        use-auth-val: bool
    ) {
        use-auth = use-auth-val;
        if use-auth-val {
            account-input.text = account;
        } else {
            password-input.text = "";
        }
    }

    function do-login() {
        if use-auth {
            auth-requested();
        } else {
            login-requested(account-input.text, password-input.text);
        }  
    }

    VerticalLayout {
        alignment: space-between;

        VerticalBox {
            alignment: start;
    
            HorizontalBox {
                alignment: start;
                
                register := Button {
                    text: @tr("注册…");
                    icon: StyleMetrics.dark-color-scheme
                        ? @image-url("images/ext_link.svg")
                        : @image-url("images/ext_link_light.svg");
                }
            }
    
            ClosureStudioLogoStacked {
                single-row-size: 60px;
            }
    
            HorizontalBox {
                alignment: center;
    
                account-input := LineEdit {
                    enabled: !use-auth && !logging;
                    width: parent.width - 40px;
                    height: 42px;
                    horizontal-alignment: left;
    
                    placeholder-text: @tr("账号");
                }
            }
    
            HorizontalBox {
                alignment: center;
    
                password-input := LineEdit {
                    enabled: !use-auth && !logging;
                    width: parent.width - 40px;
                    height: 42px;
                    horizontal-alignment: left;
                    input-type: InputType.password;
    
                    placeholder-text: use-auth ? @tr("已记住登录状态") : @tr("密码");
                    accepted => {
                        do-login();
                    }
                }
            }
    
            HorizontalBox {
                alignment: center;
    
                Button {
                    primary: true;
                    enabled: !logging 
                        && ((account-input.text != "" && password-input.text != "") || use-auth);
                    text: @tr("登录");
                    width: parent.width - 40px;
                    clicked => {
                        do-login()
                    }
                }
            }
    
            if use-auth && !logging : HorizontalLayout {
                alignment: center;
    
                Rectangle {
                    Text {
                        text: @tr("[登录其他账号]");
                    }
    
                    TouchArea {
                        clicked => {
                            set-use-auth("", false);
                        }
                    }
                }
            }

            HorizontalBox {
                alignment: center;

                Switch {
                    text: @tr("低数据模式（不加载图片资源）");
                    checked: StateGlobals.data-saver-mode-enabled;
                    toggled => {
                        Callbacks.set-data-saver-mode(self.checked);
                    }
                }
            }
    
            HorizontalBox {
                alignment: center;

                Rectangle {
                    border-radius: 5px;
                    
                    background: login-state == LoginState.Errored
                        ? #dd8800
                        : #0000;
    
                    HorizontalBox {
                        alignment: center;
            
                        login-spinner := Spinner {
                            visible: logging;
                            indeterminate: true;
                            width: self.visible ? 40px : 0px;
                        }
            
                        Text {
                            vertical-alignment: center;
                            color: login-state == LoginState.Errored
                                ? whitesmoke
                                : StyleMetrics.default-text-color;
                            font-size: 13px;
            
                            text: login-status-text;
                            wrap: word-wrap;
                        }
                    }

                    width: parent.width - 40px;
                }
            }
        }

        bottom-text := VerticalBox {
            Text {
                text: @tr("可露希尔云托管");
                horizontal-alignment: center;
            }

            Text {
                text: @tr("https://arknights.host");
                font-family: FontGlobals.alphanumeric-text-sans;
                horizontal-alignment: center;
            }
        }
    }

    states [
        unlogged when login-state == LoginState.Unlogged: {
            logging: false;
        }
        logging when login-state == LoginState.LoggingIn: {
            logging: true;
        }
        errored when login-state == LoginState.Errored: {
            logging: false;
        }
        logged when login-state == LoginState.Logged: {
            logging: false;
        }
    ]
}