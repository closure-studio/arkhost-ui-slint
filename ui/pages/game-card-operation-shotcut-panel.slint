import { GridBox , Button, HorizontalBox, VerticalBox, StyleMetrics , Spinner} from "std-widgets.slint";
import { GameInfo, GameState, GameOperationRequestState } from "../game-info.slint";

component GameOperationShortcutButton inherits Button {

}

export component GameCardOperationShortcutPanel inherits HorizontalLayout {
    in property <GameInfo> info;
    callback start-game(string /* GameInfo ID */ );
    callback stop-game(string /* GameInfo ID */ );
    callback restart-game(string /* GameInfo ID */ );

    private property <bool> can-login;
    private property <bool> can-stop;
    private property <bool> can-restart;
    
    spacing: 10px;
    alignment: start;

    login := GameOperationShortcutButton {
        enabled: can-login;
        icon: StyleMetrics.dark-color-scheme 
            ? @image-url("../images/game_card_shortcut_start.svg")
            : @image-url("../images/game_card_shortcut_start_light.svg");
        text: @tr("启动");
        clicked => { start-game(info.id); }
    }

    stop := GameOperationShortcutButton {
        enabled: can-stop;
        icon: StyleMetrics.dark-color-scheme 
            ? @image-url("../images/game_card_shortcut_stop.svg")
            : @image-url("../images/game_card_shortcut_stop_light.svg");
        text: @tr("停止");
        clicked => { stop-game(info.id); }
    }

    // restart := GameOperationShortcutButton {
    //     enabled: can-restart;
    //     icon: StyleMetrics.dark-color-scheme 
    //         ? @image-url("../images/game_card_shortcut_restart.svg")
    //         : @image-url("../images/game_card_shortcut_restart_light.svg");
    //     text: @tr("重启");
    //     clicked => { restart-game(info.id); }
    // }

    request-spinner := Spinner {
        width: self.visible ? root.height : 0px;
        indeterminate: true;
        visible: info.request-state == GameOperationRequestState.Requesting;
    }
    
    states [
        busy when 
            info.request-state == GameOperationRequestState.Requesting
            || info.game-state == GameState.Logging
            || info.game-state == GameState.Captcha: {
            can-login: false;
            can-stop: false;
            can-restart: false;
        }
        can-login when 
            info.game-state == GameState.Faulted
            || info.game-state == GameState.Stopped: {
            can-login: true;
            can-stop: false;
            can-restart: false;
        }
        can-interrupt when 
            info.game-state == GameState.Running: {
            can-login: false;
            can-stop: true;
            can-restart: true;
        }
    ]
}