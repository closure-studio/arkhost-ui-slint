import { GridBox , Button, HorizontalBox, VerticalBox, StyleMetrics } from "std-widgets.slint";
import { GameInfo, GameState, GameInfoViewType, GameLogLoadState, GameLogLoadRequestType } from "../game-info.slint";
import { GameCardDoctorInfo } from "game-card-doctor-info.slint";
import { GameCardOptions } from "game-card-options.slint";
import { GameCardLog } from "game-card-log.slint";
import { GameCardOperationShortcutPanel, GameCardOperationShortcutPanelVertical } from "game-card-operation-shotcut-panel.slint";
import { GameStatusBadge } from "game-status-badge.slint";
import { MockData } from "../mock-data.slint";
import { CharIllust } from "../components/char-illust.slint";

component GameCardTab inherits Rectangle {
    in property <length> design-height;
    in property <length> adaptive-height;
    in property <int> active-tab;
    in property <int> current-active-tab;
    y: current-active-tab == active-tab
        ? 0
        : current-active-tab > active-tab
            ? - self.height - 5px
            : root.height + 5px;

    height: adaptive-height;
    states [
        active when current-active-tab == active-tab: {
            opacity: 1;
        }
        inactive when current-active-tab == active-tab: {
            opacity: 0;
            in { animate opacity { delay: 0.25s; } }
        }
    ]
    animate y { duration: 0.25s; easing: ease; }
    @children
}

component GameCardTabSwitch inherits Rectangle {
    in property <image> icon;
    in property <int> active-tab;
    in property <int> current-active-tab;
    private property <bool> selected: current-active-tab == active-tab;

    height: 36px;
    width: 36px;
    callback clicked <=> touch-area.clicked;

    Image {
        source: icon;
        width: root.width * 0.75;
        height: root.height * 0.75;
        colorize: selected
            ? StyleMetrics.default-text-color
            : StyleMetrics.default-text-color.transparentize(60%);

        animate colorize {
             duration: 0.25s;
             easing: ease;
        }
    }

    touch-area := TouchArea {
    }
}

export component GameCard inherits Rectangle {
    in property <GameInfo> info: MockData.game-info;
    private property <int> current-active-tab: 0;
    
    callback start-game <=> doc-info.start-game;
    callback stop-game <=> doc-info.stop-game;
    callback restart-game <=> doc-info.restart-game;
    callback save-options <=> options.save-options;
    callback load-logs <=> logs.load-logs;
    callback view-changed(string, GameInfoViewType);
    
    border-radius: 10px;
    border-width: 1px;
    background: StyleMetrics.window-background;
    drop-shadow-blur: 5px;
    drop-shadow-color: darkgray;
    clip: true;
    
    CharIllust {
        illust-info: info.details.char-illust;
        target-width: min(1000px, parent.width * 0.6);
        property <length> pos-x: max(270px, parent.width * 0.35);

        states [
            show when info.details.char-illust.loaded 
                && current-active-tab == 0 
                && parent.width >= 600px: {
                x: pos-x;
                y: 0;
                opacity: 1;
                in {
                    animate opacity {
                        delay: 0.15s;
                        duration: 0.2s;
                    }
            
                    animate x {
                        delay: 0.15s;
                        duration: 0.2s;
                        easing: ease;
                    }
                }
            }
            hide when !info.details.char-illust.loaded 
                || current-active-tab != 0 
                || parent.width < 600px: {
                x: pos-x + 40px;
                y: doctor-tab.y;
                opacity: 0;
                in {
                    animate opacity { duration: 0.1s; }
                    animate y { duration: 0.1s; }

                    animate x {
                        delay: 0.1s;
                    }
                }
            }
        ]
    }

    HorizontalBox {
        spacing: 5px;

        VerticalLayout {
            Rectangle {
                private property <length> current-tab-design-height: doctor-tab.design-height;
                pure function get-adaptive-height(orig-width: length) -> length {
                    return orig-width * clamp(1 + (root.width - 1200px) / 800px, 1, 4.8 / 3);
                }
                clip: true;

                doctor-tab := GameCardTab {
                    active-tab: 0;
                    current-active-tab: current-active-tab;
                    doc-info := GameCardDoctorInfo { 
                        info: info; 
                    }
                    design-height: 320px;
                    adaptive-height: get-adaptive-height(self.design-height);
                }
                
                settings-tab := GameCardTab {
                    active-tab: 1;
                    current-active-tab: current-active-tab;
                    options := GameCardOptions {
                        info: info;
                    }
                    design-height: 500px;
                    adaptive-height: get-adaptive-height(self.design-height);
                }

                log-tab := GameCardTab {
                    active-tab: 2;
                    current-active-tab: current-active-tab;
                    logs := GameCardLog {
                        info: info;
                    }
                    design-height: 500px;
                    adaptive-height: get-adaptive-height(self.design-height);
                }

                height: get-adaptive-height(current-tab-design-height);
                
                states [
                    doc-info when current-active-tab == 0: {
                        current-tab-design-height: doctor-tab.design-height;
                        height: get-adaptive-height(current-tab-design-height);
                        in { animate height { duration: 0.25s; easing: ease; } }
                    }
                    settings when current-active-tab == 1: {
                        current-tab-design-height: settings-tab.design-height;
                        height: get-adaptive-height(current-tab-design-height);
                        in { animate height { duration: 0.25s; easing: ease; } }
                    }
                    log when current-active-tab == 2: {
                        current-tab-design-height: log-tab.design-height;
                        height: get-adaptive-height(current-tab-design-height);
                        in { animate height { duration: 0.25s; easing: ease; } }
                    }
                ]
            }
        }

        VerticalLayout {
            alignment: space-between;

            VerticalBox {
                alignment: start;

                GameCardTabSwitch {
                    active-tab: 0;
                    current-active-tab: current-active-tab;
                    icon: @image-url("../images/game_card_tab_user.svg");
                    clicked => { 
                        current-active-tab = 0; 
                        view-changed(info.id, GameInfoViewType.DoctorInfo);
                    }
                }
    
                GameCardTabSwitch {
                    active-tab: 1;
                    current-active-tab: current-active-tab;
                    icon: @image-url("../images/game_card_tab_options.svg");
                    clicked => { 
                        current-active-tab = 1; 
                        view-changed(info.id, GameInfoViewType.Settings);
                    }
                }
    
                GameCardTabSwitch {
                    active-tab: 2;
                    current-active-tab: current-active-tab;
                    icon: @image-url("../images/game_card_tab_log.svg");
                    clicked => { 
                        current-active-tab = 2;                 
                        view-changed(info.id, GameInfoViewType.Logs);
                    }
                }
            }

            VerticalLayout {
                spacing: 10px;
                alignment: end;

                GameCardOperationShortcutPanelVertical {
                    info: info;
                    compact: true;

                    opacity: current-active-tab != 0
                        ? 100%
                        : 0%;
                
                    animate opacity {
                        easing: ease;
                        duration: 0.125s;
                    }
                }

                GameStatusBadge {
                    info: info;
                    compact: true;
                    opacity: current-active-tab != 0
                        ? 100%
                        : 0%;
                
                    animate opacity {
                        easing: ease;
                        duration: 0.125s;
                    }
                }
            }
        }
    }
}