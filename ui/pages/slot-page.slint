import { ScrollView , VerticalBox, StyleMetrics } from "std-widgets.slint";
import { MockData } from "../mock-data.slint";
import { SlotInfo, SlotState, SlotDetailsViewState } from "../slot-info.slint";
import { BannerNotification } from "../components/banner-notification.slint";
import { SlotCard } from "slot-card.slint";
import { SlotTierCard } from "slot-tier-card.slint";
import { UserInfo, UserTier, UserProgress } from "../user-info.slint";
import { SlotTierConsts } from "../slot-tier-consts.slint";
import { UserCard } from "user-card.slint";
import { Callbacks } from "../callbacks.slint";
import { SlotList } from "slot-list.slint";
import { FontGlobals } from "../font-globals.slint";

export component SlotPage {
    in property <[SlotInfo]> slot-info-list: [
        MockData.slot-info,
        MockData.slot-info,
        MockData.slot-info,
    ];
    in property <string> selected-slot;
    in property <UserInfo> user-info: MockData.user-info;

    private property <bool> double-column-layout: self.width >= 1200px;
    private property <bool> has-selected-slot: selected-slot != "";

    scroll-view := ScrollView {
        HorizontalLayout {
            alignment: center;
            spacing: 10px; 
            
            page-layout := Rectangle {
                private property <length> single-column-slots-start-y:
                    user-info-area.min-height;

                user-info-area := VerticalLayout {
                    alignment: start;
                    padding-top: 10px;
                    spacing: 10px;

                    BannerNotification {
                        background-color: #00649ebb;
                        accent-color: #ebf3ff;
                        has-action: false;
                        text: @tr("üëÄ ËØ•È°µ‰ºöÊòæÁ§∫ÊâãÊú∫Âè∑/Â∏êÂØÜÁ≠âÊïèÊÑü‰ø°ÊÅØÔºåÊà™ÂõæÊó∂ËØ∑Ê≥®ÊÑèÈÅÆÊå°„ÄÇ");
                    }

                    if user-info.progress == UserProgress.Initial: BannerNotification {
                        property <image> empty;

                        background-color: #00649ebb;
                        accent-color: #ebf3ff;
                        text: @tr("üî∞ ‰Ω†ËøòÊ≤°ÊúâÊ∑ªÂä†Á¨¨‰∏Ä‰∏™Ê∏∏ÊàèË¥¶Âè∑ÔºåÁÇπËøôÈáåÂºÄÂßã‰∏äË∑Ø üëâ");
    
                        has-action: true;
                        action-text: @tr("[Go]");
                        action-icon: empty;
                        action => {
                            user-card.open-sms-verify-dialog();
                            Callbacks.expand-verify-slot();
                        }
                    }

                    if user-info.progress == UserProgress.SmsVerified: BannerNotification {
                        background-color: #00649ebb;
                        accent-color: #ebf3ff;
                        text: @tr("‚úÖ ÂΩíÂ±ûËÆ§ËØÅÂ∑≤ÁªèÂÆåÊàêÔºå‰Ω†ÂèØ‰ª•ÁªßÁª≠Ê∑ªÂä†Êõ¥Â§öÊâòÁÆ°Ë¥¶Âè∑‰∫Ü„ÄÇ");

                        has-action: false;
                    }
                    
                    slot-tier-card := SlotTierCard {
                        data: SlotTierConsts.get-tier-card-data(user-info.tier);

                        on-upgrade-tier(next-tier) => {
                            if next-tier == UserTier.SmsVerified {
                                if user-info.progress == UserProgress.Initial {
                                    Callbacks.expand-verify-slot();
                                }
                                user-card.open-sms-verify-dialog();
                            } else if next-tier == UserTier.QQVerified {
                                user-card.open-qq-verify-dialog();
                            }
                        }
                    }
    
                    user-card := UserCard {
                        user-info: user-info;
                    }

                    slot-list := SlotList {
                        slot-info-list: slot-info-list;
                        slot-selected(id) => { Callbacks.slot-selected(id); }
                    }
    
                    animate width { duration: 0.25s; easing: ease; }

                    x: 0px;
                    y: 0px;
                    width: double-column-layout
                        ? 550px
                        : 640px;
                }
    
                slot-info-area := Rectangle {
                    // placeholder
                    Rectangle {
                        opacity: !has-selected-slot
                            ? 1
                            : 0;
                        background: StyleMetrics.dark-color-scheme
                            ? StyleMetrics.window-background.darker(80%).transparentize(50%)
                            : StyleMetrics.window-background.darker(20%).transparentize(50%);
                        border-radius: 10px;

                        Text {
                            font-size: 18px;
                            font-family: FontGlobals.alphanumeric-text-sans;
                            color: StyleMetrics.default-text-color.transparentize(60%);
                            text: @tr("/// ËØ∑Âú®ÂàóË°®‰∏≠ÈÄâÊã©‰∏Ä‰∏™Ë¥¶Âè∑Ê†è‰Ωç ///");
                        }

                        y: 10px;
                        height: user-info-area.min-height - 10px;

                        animate opacity { duration: 0.15s; easing: ease; }
                    }

                    for slot-info in slot-info-list: SlotCard {
                        info: slot-info;
                        slot-saved(uuid, update-draft) => { 
                            Callbacks.update-slot(uuid, update-draft); 
                        }
                        reset-slot-update-request-state(uuid) => { Callbacks.reset-slot-update-request-state(uuid); }

                        x: 0px;

                        animate y { duration: 0.25s; easing: ease; }
                        animate opacity { duration: 0.25s; easing: ease; }

                        states [
                            hide when slot-info.view-state != SlotDetailsViewState.Expanded: {
                                opacity: 0;
                                y: - self.height - 1px;
                            }
                            show when slot-info.view-state == SlotDetailsViewState.Expanded: {
                                opacity: 1;
                                y: 10px;
                            }
                        ]
                    }
    
                    states [
                        single-column when !double-column-layout: {
                            x: 0px;
                            y: single-column-slots-start-y;

                            in {
                                animate x { delay: 0.5s; duration: 0.25s; easing: ease; }
                            }
                        }
                        double-column when double-column-layout: {
                            x: user-info-area.width + 10px;
                            y: 0px;

                            in {
                                animate y { delay: 0.5s; duration: 0.25s; easing: ease; }
                            }
                        }
                    ]
                    
                    width: min(root.width, 640px);
                    height: max(700px, user-info-area.min-height + 10px);
                    min-height: self.height;
                }

                states [
                    single-column when !double-column-layout: {
                        width: 640px;
                        height: user-info-area.min-height + slot-info-area.min-height;
                    }
                    double-column when double-column-layout: {
                        width: user-info-area.width + slot-info-area.width + 10px;
                        height: max(user-info-area.min-height, slot-info-area.min-height);
                    }
                ]
            }
        }
    }
}
