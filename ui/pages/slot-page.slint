import { ScrollView, VerticalBox, Palette } from "std-widgets.slint";
import { MockData } from "../mock-data.slint";
import { SlotInfo, SlotState, SlotDetailsViewState } from "../slot-info.slint";
import { BannerNotification } from "../components/banner-notification.slint";
import { SlotCard } from "slot-card.slint";
import { SlotTierCard } from "slot-tier-card.slint";
import { UserInfo, UserTier, UserProgress } from "../user-info.slint";
import { SlotTierConsts } from "../slot-tier-consts.slint";
import { UserCard } from "user-card.slint";
import { SlotListItem } from "slot-list.slint";
import { Callbacks } from "../callbacks.slint";
import { FontGlobals } from "../font-globals.slint";

export component SlotPage {
    in property <[SlotInfo]> slot-info-list: [
        MockData.slot-info,
        MockData.slot-info,
        MockData.slot-info,
    ];
    in property <UserInfo> user-info: MockData.user-info;
    private property <bool> double-column-layout: self.width >= 1200px;
    scroll-view := ScrollView {
        HorizontalLayout {
            alignment: center;
            spacing: 10px;
            page-layout := Rectangle {
                private property <length> single-column-slots-start-y:
                    user-info-area.min-height;
                user-info-area := VerticalLayout {
                    alignment: start;
                    padding-top: 10px;
                    spacing: 10px;
                    BannerNotification {
                        background-color: Palette.alternate-background;
                        accent-color: Palette.foreground;
                        has-action: false;
                        text: @tr("üëÄ ËØ•È°µ‰ºöÊòæÁ§∫ÊâãÊú∫Âè∑/Â∏êÂØÜÁ≠âÊïèÊÑü‰ø°ÊÅØÔºåÊà™ÂõæÊó∂ËØ∑Ê≥®ÊÑèÈÅÆÊå°„ÄÇ");
                    }

                    if user-info.progress == UserProgress.Initial && !user-card.sms-dialog-open: BannerNotification {
                        property <image> empty;
                        background-color: #0661d0;
                        accent-color: #ebf3ff;
                        text: @tr("üî∞ ‰Ω†ËøòÊ≤°ÊúâÊ∑ªÂä†Á¨¨‰∏Ä‰∏™Ê∏∏ÊàèË¥¶Âè∑ÔºåÁÇπËøôÈáåÂºÄÂßã‰∏äË∑Ø üëâ");
                        has-action: true;
                        action-text: @tr("[Go]");
                        action-icon: empty;
                        action => {
                            user-card.open-sms-verify-dialog();
                            Callbacks.expand-verify-slot();
                        }
                    }
                    if user-info.progress == UserProgress.SmsVerified: BannerNotification {
                        background-color: Palette.alternate-background;
                        accent-color: Palette.foreground;
                        text: @tr("‚úÖ ÂΩíÂ±ûËÆ§ËØÅÂ∑≤ÁªèÂÆåÊàêÔºå‰Ω†ÂèØ‰ª•ÁªßÁª≠Ê∑ªÂä†Êõ¥Â§öÊâòÁÆ°Ë¥¶Âè∑‰∫Ü„ÄÇ");
                        has-action: false;
                    }
                    slot-tier-card := SlotTierCard {
                        data: SlotTierConsts.get-tier-card-data(user-info.tier);
                        on-upgrade-tier(next-tier) => {
                            if next-tier == UserTier.SmsVerified {
                                if user-info.progress == UserProgress.Initial {
                                    Callbacks.expand-verify-slot();
                                }
                                user-card.open-sms-verify-dialog();
                            } else if next-tier == UserTier.QQVerified {
                                user-card.open-qq-verify-dialog();
                            }
                        }
                    }

                    user-card := UserCard {
                        user-info: user-info;
                    }

                    x: 0px;
                    y: 0px;
                    width: double-column-layout ? 550px : min(640px, root.width - 20px);
                }

                slot-info-area := Rectangle {
                    slot-info-layout := VerticalLayout {
                        alignment: start;
                        padding-top: 10px;
                        spacing: 10px;
                        // placeholder
                        for slot-info[idx] in slot-info-list: VerticalLayout {
                            private property <bool> expanded: slot-info.view-state == SlotDetailsViewState.Expanded || slot-info.view-state == SlotDetailsViewState.Independent;
                            spacing: expanded ? 10px : 0px;
                            if slot-info.view-state != SlotDetailsViewState.Independent: SlotListItem {
                                index: idx + 1;
                                info: slot-info;
                                slot-selected(id) => {
                                    Callbacks.slot-selected(id);
                                }
                            }
                            Rectangle {
                                slot-card := SlotCard {
                                    animated-toggle: false;
                                    info: slot-info;
                                    slot-saved(uuid, update-draft) => {
                                        Callbacks.update-slot(uuid, update-draft);
                                    }
                                    reset-slot-update-request-state(uuid) => {
                                        Callbacks.reset-slot-update-request-state(uuid);
                                    }
                                    x: 0px;
                                    animate y {
                                        duration: 0.25s;
                                        easing: ease;
                                    }
                                    states [
                                        show when expanded: {
                                            y: 0;
                                            opacity: 1;
                                            in {
                                                animate opacity {
                                                    duration: 0.15s;
                                                    easing: ease;
                                                    delay: 0.15s;
                                                }
                                            }
                                        }
                                        hide when !expanded: {
                                            y: -self.width - 1px;
                                            opacity: 0;
                                            in {
                                                animate opacity {
                                                    duration: 0.15s;
                                                    easing: ease;
                                                }
                                            }
                                        }
                                    ]
                                }

                                animate height {
                                    duration: 0.25s;
                                    easing: ease;
                                }
                                states [
                                    show when expanded: {
                                        height: slot-card.height;
                                    }
                                    hide when !expanded: {
                                        height: 0;
                                    }
                                ]
                            }
                        }
                        width: parent.width;
                    }

                    states [
                        single-column when !double-column-layout: {
                            x: 0px;
                            y: single-column-slots-start-y;
                            in {
                                animate x {
                                    delay: 0.5s;
                                    duration: 0.25s;
                                    easing: ease;
                                }
                            }
                        }
                        double-column when double-column-layout: {
                            x: user-info-area.width + 10px;
                            y: 0px;
                            in {
                                animate y {
                                    delay: 0.5s;
                                    duration: 0.25s;
                                    easing: ease;
                                }
                            }
                        }
                    ]
                    width: min(640px, root.width - 20px);
                    height: self.min-height;
                    min-height: max(slot-info-layout.min-height, user-info-area.min-height) + 10px;
                }

                states [
                    single-column when !double-column-layout: {
                        width: min(640px, root.width - 20px);
                        height: user-info-area.min-height + slot-info-area.min-height;
                    }
                    double-column when double-column-layout: {
                        width: user-info-area.width + slot-info-area.width + 10px;
                        height: max(user-info-area.min-height, slot-info-area.min-height);
                    }
                ]
            }
        }
    }
}
