import { GridBox, Switch, ScrollView, VerticalBox, LineEdit, HorizontalBox, SpinBox, Button, Spinner, Slider, GroupBox} from "std-widgets.slint";
import { GameOptions, GameInfo, GameOptionSaveState } from "../game-info.slint";

component IntegerSlider inherits VerticalLayout {
    in property <bool> enabled;
    in property <string> title;
    in property <int> edit-minimum;
    in property <int> edit-maximum;
    in property <int> minimum;
    in property <int> maximum;
    out property <int> value;
    public function set-value(raw: float){
        value = clamp(round(raw), edit-minimum, edit-maximum);
        edit.text = value;
        slider.value = clamp(value, minimum, maximum);
    }
    spacing: 10px;
    Text {
        text: title;
        horizontal-alignment: left;
    }

    HorizontalLayout {
        alignment: stretch;
        spacing: 12px;
        edit := LineEdit {
            enabled: enabled;
            input-type: number;
            edited => {
                set-value(self.text.to-float());
            }
            width: 70px;
            horizontal-stretch: 0;
        }

        slider := Slider {
            enabled: enabled;
            minimum: minimum;
            maximum: maximum;
            changed => {
                set-value(self.value);
            }
            min-width: 150px;
            horizontal-stretch: 1;
        }
    }
}

export component GameCardOptions inherits ScrollView {
    in property <GameInfo> info;
    private property <GameOptions> options: info.options;
    private property <bool> saving;
    callback save-options(string, GameOptions);
    function reset-options(){
        enable-building-arrange.checked = options.enable-building-arrange;
        enable-auto-battle.checked = options.enable-auto-battle;
        recruit-ignore-robot.checked = options.recruit-ignore-robot;
        ap-reserve.set-value(info.options.ap-reserve);
        recruit-reserve.set-value(info.options.recruit-reserve);
    }
    init => {
        reset-options();
    }
    HorizontalLayout {
        alignment: center;
        VerticalBox {
            alignment: space-between;
            spacing: 10px;
            VerticalBox {
                alignment: start;
                spacing: 10px;
                Text {
                    text: @tr("托管设置");
                    font-size: 20px;
                    height: 24px;
                }

                enable-building-arrange := Switch {
                    enabled: !saving;
                    text: @tr("启用基建换班");
                }

                enable-auto-battle := Switch {
                    enabled: !saving;
                    text: @tr("启用自动战斗");
                }

                recruit-ignore-robot := Switch {
                    enabled: !saving;
                    text: @tr("公招忽略小车");
                }

                HorizontalLayout {
                    alignment: stretch;
                    ap-reserve := IntegerSlider {
                        enabled: !saving;
                        title: @tr("保留理智");
                        minimum: 0;
                        maximum: 135;
                        edit-minimum: 0;
                        edit-maximum: 1000;
                        max-width: 400px;
                    }
                }

                HorizontalLayout {
                    alignment: stretch;
                    recruit-reserve := IntegerSlider {
                        enabled: !saving;
                        title: @tr("保留公招券");
                        minimum: 0;
                        maximum: 100;
                        edit-minimum: 0;
                        edit-maximum: 1000;
                        max-width: 400px;
                    }
                }
            }

            HorizontalLayout {
                alignment: start;
                spacing: 10px;
                Button {
                    enabled: !saving;
                    primary: true;
                    text: @tr("保存");
                    clicked => {
                        options.enable-building-arrange = enable-building-arrange.checked;
                        options.enable-auto-battle = enable-auto-battle.checked;
                        options.recruit-ignore-robot = recruit-ignore-robot.checked;
                        options.ap-reserve = ap-reserve.value;
                        options.recruit-reserve = recruit-reserve.value;
                        save-options(info.id, options);
                    }
                    width: 100px;
                }

                Button {
                    enabled: !saving;
                    text: @tr("撤消");
                    clicked => {
                        reset-options();
                    }
                    width: 100px;
                }

                if saving: Spinner {
                    indeterminate: true;
                    width: parent.height;
                }
            }

            width: clamp(root.width - 20px, 300px, 1000px);
        }
    }

    states [
        idle when info.save-state == GameOptionSaveState.Idle: {
            saving: false;
        }
        saving when info.save-state == GameOptionSaveState.Saving: {
            saving: true;
        }
    ]
}
