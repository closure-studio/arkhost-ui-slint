import { GridBox, Switch, ScrollView, VerticalBox, LineEdit, HorizontalBox, SpinBox, Button, Spinner} from "std-widgets.slint";
import { GameOptions, GameInfo, GameOptionSaveState } from "../game-info.slint";

export component GameCardOptions inherits ScrollView {
    in property <GameInfo> info;
    private property <GameOptions> options: info.options;
    private property <bool> saving;
    callback save-options(string, GameOptions);
    
    HorizontalLayout {
        alignment: center;

        VerticalBox {
            alignment: space-between;
            spacing: 10px;
    
            VerticalBox {
                alignment: start;
                spacing: 10px;

                Text {
                    text: @tr("托管设置");
                    font-size: 20px;
                    height: 24px;
                }
                
                enable-building-arrange := Switch {
                    enabled: !saving;
                    text: @tr("启用基建换班");
                    checked: info.options.enable-building-arrange;
                }
        
                enable-auto-battle := Switch {
                    enabled: !saving;
                    text: @tr("启用自动战斗");
                    checked: info.options.enable-auto-battle;
                }
        
                recruit-ignore-robot := Switch {
                    enabled: !saving;
                    text: @tr("公招忽略小车");
                    checked: info.options.recruit-ignore-robot;
                }
        
                Text {
                    text: @tr("保留理智");
                }
        
                HorizontalLayout {
                    ap-reserve := SpinBox {
                        enabled: !saving;
                        maximum: 135;
                        value: info.options.ap-reserve;
                        edited => { options.ap-reserve = self.value }
                        max-width: 400px;
                    }
                }
        
                Text {
                    text: @tr("保留公招券");
                }
        
                HorizontalLayout {
                    recruit-reserve := SpinBox {
                        enabled: !saving;
                        value: info.options.recruit-reserve;
                        edited => { options.recruit-reserve = self.value }
                        max-width: 400px;
                    }
                }
            }

                    
    
            HorizontalLayout {
                alignment: start;
                spacing: 10px;

                Button {
                    enabled: !saving;
                    primary: true;
                    text: @tr("保存");
                    clicked => { 
                        options.enable-building-arrange = enable-building-arrange.checked;
                        options.enable-auto-battle = enable-auto-battle.checked;
                        options.recruit-ignore-robot = recruit-ignore-robot.checked;
                        save-options(info.id, options);
                    }

                    width: 100px;
                }

                Button {
                    enabled: !saving;
                    text: @tr("撤消");
                    clicked => { 
                        enable-building-arrange.checked = options.enable-building-arrange;
                        enable-auto-battle.checked = options.enable-auto-battle;
                        recruit-ignore-robot.checked = options.recruit-ignore-robot;
                        ap-reserve.value = info.options.ap-reserve;
                        recruit-reserve.value = info.options.recruit-reserve;
                    }

                    width: 100px;
                }

                if saving : Spinner {
                    indeterminate: true;
                    width: parent.height;
                }
            }

            width: clamp(root.width - 20px, 300px, 1000px);
        }
    }

    states [
        idle when info.save-state == GameOptionSaveState.Idle: {
            saving: false;
        }
        saving when info.save-state == GameOptionSaveState.Saving: {
            saving: true;
        }
    ]
}